"use strict";(self.webpackChunksuse_edge_docs=self.webpackChunksuse_edge_docs||[]).push([[9080],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>h});var i=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,i)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,i,n=function(e,t){if(null==e)return{};var o,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)o=a[i],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)o=a[i],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=i.createContext({}),c=function(e){var t=i.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},d=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(o),m=n,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return o?i.createElement(h,r(r({ref:t},d),{},{components:o})):i.createElement(h,r({ref:t},d))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,r=new Array(a);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,r[1]=s;for(var c=2;c<a;c++)r[c]=o[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,o)}m.displayName="MDXCreateElement"},6842:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=o(7462),n=(o(7294),o(3905));const a={sidebar_position:3,title:"Create a custom single-iso image (using SLE Micro installer and combustion image) to use it on Virtual CD-ROM"},r=void 0,s={unversionedId:"dev_howto/create-a-single-iso-image-customized",id:"dev_howto/create-a-single-iso-image-customized",title:"Create a custom single-iso image (using SLE Micro installer and combustion image) to use it on Virtual CD-ROM",description:"The feature to create a single iso (installer image and combustion) to be used by Virtual CD-Rom, will be added to the SLE Micro 5.5 release.",source:"@site/docs/dev_howto/create-a-single-iso-image-customized.md",sourceDirName:"dev_howto",slug:"/dev_howto/create-a-single-iso-image-customized",permalink:"/docs/dev_howto/create-a-single-iso-image-customized",draft:!1,editUrl:"https://github.com/suse-edge/suse-edge.github.io/tree/main/docs/dev_howto/create-a-single-iso-image-customized.md",tags:[],version:"current",lastUpdatedBy:"Alberto Morgante Medina",lastUpdatedAt:1696577527,formattedLastUpdatedAt:"Oct 6, 2023",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Create a custom single-iso image (using SLE Micro installer and combustion image) to use it on Virtual CD-ROM"},sidebar:"docs",previous:{title:"Create a simple container image based on Tumbleweed using OBS (openSUSE Build Service)",permalink:"/docs/dev_howto/create-a-simple-container-image-obs"},next:{title:"*Draft* Introduction",permalink:"/docs/product/atip/introduction"}},l={},c=[{value:"Clone the SLE Micro installer repository from OBS",id:"clone-the-sle-micro-installer-repository-from-obs",level:2},{value:"Modify the combustion package",id:"modify-the-combustion-package",level:2},{value:"Build a new SLE Micro OBS custom image with the new combustion package modified",id:"build-a-new-sle-micro-obs-custom-image-with-the-new-combustion-package-modified",level:2},{value:"Download the new iso image to prepare it with xorriso and adding combustion",id:"download-the-new-iso-image-to-prepare-it-with-xorriso-and-adding-combustion",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The feature to create a single iso (installer image and combustion) to be used by Virtual CD-Rom, will be added to the SLE Micro 5.5 release.\nWhen the SLE Micro 5.5 is released, or if you want to use the existing ",(0,n.kt)("a",{parentName:"p",href:"https://build.opensuse.org/project/show/home:amorgante:branches:SUSE:SLE-15-SP4:Update:Products:Micro54"},"build")," created in this guide, we will be able to create a single-iso image with the combustion script included just following the last part of this document ",(0,n.kt)("a",{parentName:"p",href:"#download-the-new-iso-image-to-prepare-it-with-xorriso-and-adding-combustion"},"here"),"."),(0,n.kt)("p",null,"Meanwhile, we could use this workaround to create a single-iso image in order to modify the combustion package to add some lines to detect the CD-Rom properly executing the combustion after installing the SLE Micro image."),(0,n.kt)("p",null,"To do that we can follow the next steps:"),(0,n.kt)("h2",{id:"clone-the-sle-micro-installer-repository-from-obs"},"Clone the SLE Micro installer repository from OBS"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Log in to ",(0,n.kt)("a",{parentName:"li",href:"https://build.opensuse.org"},"OBS")),(0,n.kt)("li",{parentName:"ul"},"Go to the ",(0,n.kt)("a",{parentName:"li",href:"https://build.opensuse.org/project/show/SUSE:SLE-15-SP4:Update:Products:Micro54"},"SLE Micro installer repository")),(0,n.kt)("li",{parentName:"ul"},"Create a branch from this project to link 2 packages (",(0,n.kt)("inlineCode",{parentName:"li"},"combustion")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"SLE-Micro"),") to modify the combustion package to add some extra code. Then we need to link the SLE Micro image to be able to build a new image with the combustion package modified.")),(0,n.kt)("p",null,"To create the link between the 2 packages, go to the ",(0,n.kt)("inlineCode",{parentName:"p"},"Meta")," tab and then add the next lines:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml"},'<repository name="standard">\n  <path project="SUSE:SLE-15-SP4:Update:Products:Micro54" repository="standard"/>\n  <arch>aarch64</arch>\n  <arch>ppc64le</arch>\n  <arch>s390x</arch>\n  <arch>x86_64</arch>\n</repository>\n<repository name="images" rebuild="local">\n  <path project="home:<user>:branches:SUSE:SLE-15-SP4:Update:Products:Micro54" repository="standard"/>\n  <arch>x86_64</arch>\n</repository>\n')),(0,n.kt)("p",null,"After that click on ",(0,n.kt)("inlineCode",{parentName:"p"},"Save")," and then you should see something like:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"obs-single-iso.png",src:o(7e3).Z,width:"1541",height:"793"})),(0,n.kt)("p",null,"Now, for any modification to the combustion package, the SLE Micro image will be automatically rebuilt with the new combustion package changes."),(0,n.kt)("h2",{id:"modify-the-combustion-package"},"Modify the combustion package"),(0,n.kt)("p",null,"To modify the combustion package, we need to go to the ",(0,n.kt)("inlineCode",{parentName:"p"},"combustion")," package and then download the next file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"osc getbinaries home:<user>:branches:SUSE:SLE-15-SP4:Update:Products:Micro54 combustion standard x86_64 combustion-1.0+git2.obscpio\n")),(0,n.kt)("p",null,"This file contains the combustion image that will be used by the SLE Micro installer to create the final image."),(0,n.kt)("p",null,"To extract the content of this file, we need to execute the next command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cpio -idmv < combustion-1.0+git2.obscpio\n")),(0,n.kt)("p",null,"After that, we should see something like:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ ls -l\ntotal 68\ndrwxr-xr-x   4096 sep 14 13:20 .\ndrwx------.  4096 sep 14 13:20 ..\n-rw-r--r--   6064 sep 12 16:09 combustion\n-rw-r--r--    512 sep 12 16:07 combustion-1.0+git2.obscpio\n-rw-r--r--   1032 sep 12 16:07 combustion-prepare.service\n-rw-r--r--   1488 sep 12 16:07 combustion.rules\n-rw-r--r--   1009 sep 12 16:07 combustion.service\n-rw-r--r--  18092 sep 12 16:07 LICENSE\n-rw-r--r--    408 sep 12 16:07 Makefile\n-rw-r--r--   1240 sep 14 13:20 module-setup.sh\n-rw-r--r--   4686 sep 12 16:07 README.md\n")),(0,n.kt)("p",null,"Let's change the next things:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Timeout")," to wait for the config drive from 10 to 15 seconds")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"sed -i 's/devtimeout=10/devtimeout=15/g' module-setup.sh"),"  "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Combustion labels")," to be able to mount the config drive adding the labels ",(0,n.kt)("inlineCode",{parentName:"li"},"install")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"INSTALL"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"...\n...\nfor label in combustion COMBUSTION ignition IGNITION install INSTALL; do\n...\n...\n")),(0,n.kt)("p",null,"After changing the code, we need to create a new ",(0,n.kt)("inlineCode",{parentName:"p"},"combustion-1.0+git2.obscpio")," file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"find combustion-1.0+git2 -type f -print | cpio -ocv > combustion-1.0+git2.obscpio\n")),(0,n.kt)("p",null,"And upload again to the combustion package OBS to build a new package with the modifications"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'osc add combustion-1.0+git2.obscpio\nosc commit -m "Update combustion-1.0+git2.obscpio"\n')),(0,n.kt)("p",null,"After that you should see a new build is running: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"osc results\n")),(0,n.kt)("h2",{id:"build-a-new-sle-micro-obs-custom-image-with-the-new-combustion-package-modified"},"Build a new SLE Micro OBS custom image with the new combustion package modified"),(0,n.kt)("p",null,"After the combustion package is built, we need to rebuild a new SLE Micro image with the new combustion package."),(0,n.kt)("p",null,"To do that you can go to the ",(0,n.kt)("inlineCode",{parentName:"p"},"SLE-Micro")," package and then click on ",(0,n.kt)("inlineCode",{parentName:"p"},"Trigger Rebuild")," and then select the ",(0,n.kt)("inlineCode",{parentName:"p"},"images")," repository and then click on ",(0,n.kt)("inlineCode",{parentName:"p"},"Trigger Rebuild")," again.\nAnother easier option to do that, is to modify the ",(0,n.kt)("inlineCode",{parentName:"p"},"SLE-Micro.changes")," to add some information about the new combustion changes and then commit the changes and then the image will be automatically rebuilt."),(0,n.kt)("h2",{id:"download-the-new-iso-image-to-prepare-it-with-xorriso-and-adding-combustion"},"Download the new iso image to prepare it with xorriso and adding combustion"),(0,n.kt)("p",null,"After the image is built, we need to download the new iso image to prepare it with ",(0,n.kt)("inlineCode",{parentName:"p"},"xorriso")," and adding combustion.\nTo do that, we need to go to the ",(0,n.kt)("inlineCode",{parentName:"p"},"images")," repository and then download the new iso image."),(0,n.kt)("p",null,"Now, we should have the next files to generate the final ",(0,n.kt)("inlineCode",{parentName:"p"},"single-iso")," image:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Input:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"SLE-Micro.x86_64-5.4.0-Default-SelfInstall-Build15.1.install.iso   (This is the new build image with the combustion package modified)"),(0,n.kt)("li",{parentName:"ul"},"combustion folder with the next structure:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"./script   (this is the combustion script with the tasks we want to execute during the installation in the combustion phase)"))))),(0,n.kt)("li",{parentName:"ul"},"Output:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"SLE-Micro-Selfinstall-with-mycombustion-single-iso.iso (This is the final single-iso image with the combustion script included and the installer iso image)")))),(0,n.kt)("p",null,"Using ",(0,n.kt)("inlineCode",{parentName:"p"},"xorriso")," we will create the final single-iso:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"xorriso -indev ./SLE-Micro.x86_64-5.4.0-Default-SelfInstall-Build15.1.install.iso \\\n        -outdev ./SLE-Micro-Selfinstall-with-mycombustion-single-iso.iso \\\n        -map ~/my-local-path/combustion /combustion \\\n        -boot_image any replay -changes_pending yes\n")),(0,n.kt)("p",null,"After that, we should have the final iso image with the combustion script included ",(0,n.kt)("inlineCode",{parentName:"p"},"SLE-Micro-Selfinstall-with-mycombustion-single-iso.iso")))}p.isMDXComponent=!0},7e3:(e,t,o)=>{o.d(t,{Z:()=>i});const i=o.p+"assets/images/obs-single-iso-f25158e879cbc65ee2a1d678dd26d203.png"}}]);