"use strict";(self.webpackChunksuse_edge_docs=self.webpackChunksuse_edge_docs||[]).push([[5662],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=l,k=d["".concat(o,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:l,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3136:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));const r={sidebar_position:4,title:"MetalLB on K3s"},i="Intro",s={unversionedId:"quickstart/metallb",id:"quickstart/metallb",title:"MetalLB on K3s",description:"MetalLB",source:"@site/docs/quickstart/metallb.md",sourceDirName:"quickstart",slug:"/quickstart/metallb",permalink:"/docs/quickstart/metallb",draft:!1,editUrl:"https://github.com/suse-edge/suse-edge.github.io/tree/main/docs/quickstart/metallb.md",tags:[],version:"current",lastUpdatedBy:"Kristian Zhelyazkov",lastUpdatedAt:1693902801,formattedLastUpdatedAt:"Sep 5, 2023",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"MetalLB on K3s"},sidebar:"docs",previous:{title:"Elemental on OSX on Apple Silicon (UTM)",permalink:"/docs/quickstart/elemental-utm-aarch64"},next:{title:"MetalLB Service in front of the Kubernetes API server",permalink:"/docs/quickstart/metallb-kube-api"}},o={},p=[{value:"MetalLB",id:"metallb",level:2},{value:"MetalLB on K3s (using L2)",id:"metallb-on-k3s-using-l2",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Traefik and MetalLB",id:"traefik-and-metallb",level:3},{value:"Usage",id:"usage",level:3},{value:"Ingress with MetalLB",id:"ingress-with-metallb",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"intro"},"Intro"),(0,l.kt)("h2",{id:"metallb"},"MetalLB"),(0,l.kt)("p",null,"Via the ",(0,l.kt)("a",{parentName:"p",href:"https://metallb.universe.tf/"},"official docs"),":"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"MetalLB is a load-balancer implementation for bare metal Kubernetes clusters, using standard routing protocols.")),(0,l.kt)("p",null,"Network load balancers in bare-metal environments are much more difficult than in cloud environments. Instead of performing an API call, it involves having either network appliances or a combination of a load balancer + VIP to handle HA (or a single node load balancer SPOF). Those are not easily automated so having a K8s deployment where things go up and down all the time is challenging."),(0,l.kt)("p",null,"MetalLB tries to ",(0,l.kt)("em",{parentName:"p"},"fix")," this by leveraging the K8s model to create ",(0,l.kt)("inlineCode",{parentName:"p"},"LoadBalancer")," type of services like if they were in the cloud... but on bare-metal."),(0,l.kt)("p",null,"There are two different approaches, via ",(0,l.kt)("a",{parentName:"p",href:"https://metallb.universe.tf/concepts/layer2/"},"L2 mode")," (using ARP ",(0,l.kt)("em",{parentName:"p"},"tricks"),") or via ",(0,l.kt)("a",{parentName:"p",href:"https://metallb.universe.tf/concepts/bgp/"},"BGP"),". Mainly L2 doesn't need any special network gear but BGP is in general ",(0,l.kt)("em",{parentName:"p"},"better"),". It depends on the use cases."),(0,l.kt)("h2",{id:"metallb-on-k3s-using-l2"},"MetalLB on K3s (using L2)"),(0,l.kt)("p",null,"In this quickstart, L2 mode will be used so it means we don't need any special network gear but just a couple of free IPs in our network range, ideally outside of the DHCP pool so they are not assigned."),(0,l.kt)("p",null,"In this example, our DHCP pool is ",(0,l.kt)("inlineCode",{parentName:"p"},"192.168.122.100-192.168.122.200")," (yes, 3 IPs, see ",(0,l.kt)("a",{parentName:"p",href:"#traefik-and-metallb"},"Traefik and MetalLB")," for the reason of the extra IP) for a ",(0,l.kt)("inlineCode",{parentName:"p"},"192.168.122.0/24")," network so anything outside this range is ok (besides the gateway and other hosts that can be already running!)"),(0,l.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A K3s cluster where MetalLB is going to be deployed. Hint, you can use ",(0,l.kt)("a",{parentName:"li",href:"https://suse-edge.github.io/quickstart/k3s-on-slemicro"},"the K3s on SLE Micro guide"),".")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f K3S comes with its own service load balancer named Klipper. You ",(0,l.kt)("a",{parentName:"p",href:"https://metallb.universe.tf/configuration/k3s/"},"need to disable it in order to run MetalLB"),". To disable Klipper, K3s needs to be installed using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--disable=servicelb")," flag.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Helm"),(0,l.kt)("li",{parentName:"ul"},"A couple of free IPs in our network range. In this case ",(0,l.kt)("inlineCode",{parentName:"li"},"192.168.122.10-192.168.122.12"))),(0,l.kt)("h3",{id:"deployment"},"Deployment"),(0,l.kt)("p",null,"MetalLB leverages Helm (and other methods as well), so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"helm repo add metallb https://metallb.github.io/metallb\nhelm install --create-namespace -n metallb-system metallb metallb/metallb\n\nwhile ! kubectl wait --for condition=ready -n metallb-system $(kubectl get pods -n metallb-system -l app.kubernetes.io/component=controller -o name) --timeout=10s; do sleep 2 ; done\n")),(0,l.kt)("h3",{id:"configuration"},"Configuration"),(0,l.kt)("p",null,"At this point, the installation is completed. Now it is time to ",(0,l.kt)("a",{parentName:"p",href:"https://metallb.universe.tf/configuration/"},"configure")," using our example values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cat <<-EOF | kubectl apply -f -\napiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: ip-pool\n  namespace: metallb-system\nspec:\n  addresses:\n  - 192.168.122.10/32\n  - 192.168.122.11/32\n  - 192.168.122.12/32\nEOF\n\ncat <<-EOF | kubectl apply -f -\napiVersion: metallb.io/v1beta1\nkind: L2Advertisement\nmetadata:\n  name: ip-pool-l2-adv\n  namespace: metallb-system\nspec:\n  ipAddressPools:\n  - ip-pool\nEOF\n")),(0,l.kt)("p",null,"At this point, it is ready to be used. There are a lot of things you can customize for L2 mode such as:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://metallb.universe.tf/usage/#ipv6-and-dual-stack-services"},"IPv6 And Dual Stack Services")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://metallb.universe.tf/configuration/_advanced_ipaddresspool_configuration/#controlling-automatic-address-allocation"},"Control automatic address allocation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://metallb.universe.tf/configuration/_advanced_ipaddresspool_configuration/#reduce-scope-of-address-allocation-to-specific-namespace-and-service"},"Reduce the scope of address allocation to specific Namespaces and services")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://metallb.universe.tf/configuration/_advanced_l2_configuration/#limiting-the-set-of-nodes-where-the-service-can-be-announced-from"},"Limiting the set of nodes where the service can be announced from")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://metallb.universe.tf/configuration/_advanced_l2_configuration/#specify-network-interfaces-that-lb-ip-can-be-announced-from"},"Specify network interfaces that LB IP can be announce from"))),(0,l.kt)("p",null,"And a lot more for ",(0,l.kt)("a",{parentName:"p",href:"https://metallb.universe.tf/configuration/_advanced_bgp_configuration/"},"BGP")),(0,l.kt)("h3",{id:"traefik-and-metallb"},"Traefik and MetalLB"),(0,l.kt)("p",null,"Traefik is deployed by default with K3s (",(0,l.kt)("a",{parentName:"p",href:"https://docs.k3s.io/networking#traefik-ingress-controller"},"it can be disabled")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"--disable=traefik"),") and it is by default exposed as ",(0,l.kt)("inlineCode",{parentName:"p"},"LoadBalancer")," (to be used with Klipper). However, as Klipper needs to be disabled, Traefik service for ingress is still a ",(0,l.kt)("inlineCode",{parentName:"p"},"LoadBalancer")," type... so at the moment of deploying MetalLB the first IP will be assigned automatically to Traefik Ingress."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"# Before deploying MetalLB\nkubectl get svc -n kube-system traefik\nNAME      TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE\ntraefik   LoadBalancer   10.43.44.113   <pending>     80:31093/TCP,443:32095/TCP   28s\n# After deploying MetalLB\nkubectl get svc -n kube-system traefik\nNAME      TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)                      AGE\ntraefik   LoadBalancer   10.43.44.113   192.168.122.10   80:31093/TCP,443:32095/TCP   3m10s\n")),(0,l.kt)("p",null,"We will leverage this ",(0,l.kt)("a",{parentName:"p",href:"#ingress-with-metallb"},"later"),"."),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Let's create an example deployment:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'cat <<- EOF | kubectl apply -f -\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: hello-kubernetes\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: hello-kubernetes\n  namespace: hello-kubernetes\n  labels:\n    app.kubernetes.io/name: hello-kubernetes\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-kubernetes\n  namespace: hello-kubernetes\n  labels:\n    app.kubernetes.io/name: hello-kubernetes\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: hello-kubernetes\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: hello-kubernetes\n    spec:\n      serviceAccountName: hello-kubernetes\n      containers:\n        - name: hello-kubernetes\n          image: "paulbouwer/hello-kubernetes:1.10"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 8080\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          env:\n          - name: HANDLER_PATH_PREFIX\n            value: ""\n          - name: RENDER_PATH_PREFIX\n            value: ""\n          - name: KUBERNETES_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: KUBERNETES_POD_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n          - name: KUBERNETES_NODE_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.nodeName\n          - name: CONTAINER_IMAGE\n            value: "paulbouwer/hello-kubernetes:1.10"\nEOF\n')),(0,l.kt)("p",null,"And finally, the service:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"cat <<- EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-kubernetes\n  namespace: hello-kubernetes\n  labels:\n    app.kubernetes.io/name: hello-kubernetes\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: hello-kubernetes\nEOF\n")),(0,l.kt)("p",null,"Let's see it in action:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'kubectl get svc -n hello-kubernetes\nNAME               TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)        AGE\nhello-kubernetes   LoadBalancer   10.43.127.75   192.168.122.11   80:31461/TCP   8s\n\ncurl http://192.168.122.11\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello Kubernetes!</title>\n    <link rel="stylesheet" type="text/css" href="/css/main.css">\n    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Ubuntu:300" >\n</head>\n<body>\n\n  <div class="main">\n    <img src="/images/kubernetes.png"/>\n    <div class="content">\n      <div id="message">\n  Hello world!\n</div>\n<div id="info">\n  <table>\n    <tr>\n      <th>namespace:</th>\n      <td>hello-kubernetes</td>\n    </tr>\n    <tr>\n      <th>pod:</th>\n      <td>hello-kubernetes-7c8575c848-2c6ps</td>\n    </tr>\n    <tr>\n      <th>node:</th>\n      <td>allinone (Linux 5.14.21-150400.24.46-default)</td>\n    </tr>\n  </table>\n</div>\n<div id="footer">\n  paulbouwer/hello-kubernetes:1.10 (linux/amd64)\n</div>\n    </div>\n  </div>\n\n</body>\n</html>\n')),(0,l.kt)("h2",{id:"ingress-with-metallb"},"Ingress with MetalLB"),(0,l.kt)("p",null,"As Traefik is already serving as an ingress controller, we can expose any http/https traffic via an ",(0,l.kt)("inlineCode",{parentName:"p"},"Ingress")," object such as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'IP=$(kubectl get svc -n kube-system traefik -o jsonpath="{.status.loadBalancer.ingress[0].ip}")\ncat <<- EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hello-kubernetes-ingress\n  namespace: hello-kubernetes\nspec:\n  rules:\n  - host: hellok3s.${IP}.sslip.io\n    http:\n      paths:\n        - path: "/"\n          pathType: Prefix\n          backend:\n            service:\n              name: hello-kubernetes\n              port:\n                name: http\nEOF\n')),(0,l.kt)("p",null,"And then:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl http://hellok3s.${IP}.sslip.io\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello Kubernetes!</title>\n    <link rel="stylesheet" type="text/css" href="/css/main.css">\n    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Ubuntu:300" >\n</head>\n<body>\n\n  <div class="main">\n    <img src="/images/kubernetes.png"/>\n    <div class="content">\n      <div id="message">\n  Hello world!\n</div>\n<div id="info">\n  <table>\n    <tr>\n      <th>namespace:</th>\n      <td>hello-kubernetes</td>\n    </tr>\n    <tr>\n      <th>pod:</th>\n      <td>hello-kubernetes-7c8575c848-fvqm2</td>\n    </tr>\n    <tr>\n      <th>node:</th>\n      <td>allinone (Linux 5.14.21-150400.24.46-default)</td>\n    </tr>\n  </table>\n</div>\n<div id="footer">\n  paulbouwer/hello-kubernetes:1.10 (linux/amd64)\n</div>\n    </div>\n  </div>\n\n</body>\n</html>\n')),(0,l.kt)("p",null,"Also to verify that MetalLB is working correctly ",(0,l.kt)("inlineCode",{parentName:"p"},"arping")," can be used as:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"arping hellok3s.${IP}.sslip.io")),(0,l.kt)("p",null,"Expected result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"ARPING 192.168.64.210\n60 bytes from 92:12:36:00:d3:58 (192.168.64.210): index=0 time=1.169 msec\n60 bytes from 92:12:36:00:d3:58 (192.168.64.210): index=1 time=2.992 msec\n60 bytes from 92:12:36:00:d3:58 (192.168.64.210): index=2 time=2.884 msec\n")),(0,l.kt)("p",null,"In the example above, the traffic flows as follows:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"hellok3s.${IP}.sslip.io is resolved to the actual IP."),(0,l.kt)("li",{parentName:"ol"},"Then the traffic is handled by the ",(0,l.kt)("inlineCode",{parentName:"li"},"metallb-speaker")," pod."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"metallb-speaker")," redirects the traffic to the ",(0,l.kt)("inlineCode",{parentName:"li"},"traefik")," controller."),(0,l.kt)("li",{parentName:"ol"},"Finally Traefik forwards the request to the ",(0,l.kt)("inlineCode",{parentName:"li"},"hello-kubernetes")," Service.")))}u.isMDXComponent=!0}}]);