"use strict";(self.webpackChunksuse_edge_docs=self.webpackChunksuse_edge_docs||[]).push([[3881],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,m=p["".concat(o,".").concat(h)]||p[h]||d[h]||l;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4190:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:7,title:"RKE2 cluster with SELinux enabled"},i="Intro",s={unversionedId:"quickstart/rke2-selinux",id:"quickstart/rke2-selinux",title:"RKE2 cluster with SELinux enabled",description:"SELinux, or Security-Enhanced Linux, is a security framework for Linux operating systems that provides an additional layer of access control and mandatory access controls (MAC) beyond the traditional discretionary access controls (DAC). Developed by the National Security Agency (NSA) in collaboration with the open-source community, SELinux aims to enforce fine-grained control over processes, files, and system resources to enhance the overall security of the system.",source:"@site/docs/quickstart/rke2-selinux.md",sourceDirName:"quickstart",slug:"/quickstart/rke2-selinux",permalink:"/docs/quickstart/rke2-selinux",draft:!1,editUrl:"https://github.com/suse-edge/suse-edge.github.io/tree/main/docs/quickstart/rke2-selinux.md",tags:[],version:"current",lastUpdatedBy:"Kristian Zhelyazkov",lastUpdatedAt:1693910937,formattedLastUpdatedAt:"Sep 5, 2023",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"RKE2 cluster with SELinux enabled"},sidebar:"docs",previous:{title:"NATS on K3s",permalink:"/docs/quickstart/nats"},next:{title:"NVIDIA GPU's on SLE Micro",permalink:"/docs/quickstart/nvidia-slemicro"}},o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Installation for x86-64 architecture",id:"installation-for-x86-64-architecture",level:3},{value:"Installation on arm64 architecture",id:"installation-on-arm64-architecture",level:3},{value:"Install rke2-selinux",id:"install-rke2-selinux",level:4},{value:"Install RKE2",id:"install-rke2",level:4},{value:"Get the Kubeconfig",id:"get-the-kubeconfig",level:3},{value:"Verify the setup",id:"verify-the-setup",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intro"},"Intro"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SELinux"),", or Security-Enhanced Linux, is a security framework for Linux operating systems that provides an additional layer of access control and mandatory access controls (",(0,a.kt)("inlineCode",{parentName:"p"},"MAC"),") beyond the traditional discretionary access controls (",(0,a.kt)("inlineCode",{parentName:"p"},"DAC"),"). Developed by the National Security Agency (",(0,a.kt)("inlineCode",{parentName:"p"},"NSA"),") in collaboration with the open-source community, ",(0,a.kt)("inlineCode",{parentName:"p"},"SELinux")," aims to enforce fine-grained control over processes, files, and system resources to enhance the overall security of the system."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In this guide, we'll show you how to deploy an RKE2 cluster with SELinux enabled and enforcing.")),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1 VM. Hint ",(0,a.kt)("a",{parentName:"li",href:"https://suse-edge.github.io/docs/quickstart/slemicro-utm-aarch64"},"SLE Micro on OSX on Apple Silicon (UTM)")," or ",(0,a.kt)("a",{parentName:"li",href:"https://suse-edge.github.io/docs/quickstart/slemicro-virt-install-x86_64"},"SLE Micro on X86_64 on libvirt (virt-install)")," can be used as the base platform for validation here, but these instructions should work on any SLE Micro based system.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The VM should meet the ",(0,a.kt)("a",{parentName:"li",href:"https://docs.rke2.io/install/requirements#linuxwindows"},"RKE2 requirements"),".")))),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h3",{id:"installation-for-x86-64-architecture"},"Installation for x86-64 architecture"),(0,a.kt)("p",null,"Once we've got the VM started and running, let's prepare the config to enable SELinux mode in the RKE2 configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'mkdir -p /etc/rancher/rke2 && echo "selinux: true" >> /etc/rancher/rke2/config.yaml\n')),(0,a.kt)("p",null,"Install RKE2 cluster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"curl -sfL https://get.rke2.io | INSTALL_RKE2_CHANNEL=stable INSTALL_RKE2_METHOD=rpm RKE2_SELINUX=true sh -\n\n# Enable and Start RKE2\nsystemctl enable rke2-server.service\n")),(0,a.kt)("p",null,"Now, the VM should be rebooted for the transactional-update to finish properly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"reboot\n")),(0,a.kt)("h3",{id:"installation-on-arm64-architecture"},"Installation on arm64 architecture"),(0,a.kt)("p",null,"As there are no RPM builds for RKE2 on ",(0,a.kt)("inlineCode",{parentName:"p"},"arm64")," architecture, the ",(0,a.kt)("inlineCode",{parentName:"p"},"tarball")," method will be used and the ",(0,a.kt)("inlineCode",{parentName:"p"},"rke2-selinux")," policy will be installed manually."),(0,a.kt)("h4",{id:"install-rke2-selinux"},"Install rke2-selinux"),(0,a.kt)("p",null,"The first thing that will be installed is the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rancher/rke2-selinux"},"rke2-selinux")," policy."),(0,a.kt)("p",null,"Let's connect to the VM and run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cat >> install-selinux.sh << 'END'\n#!/bin/bash\n\n# Install rpm-testing.rancher.io repository key and the rke2-selinux package\nmkdir -p /var/lib/rpm-state\ncurl -o /root/public.key https://rpm-testing.rancher.io/public.key\ncurl -L -o /root/rke2-selinux.rpm https://github.com/rancher/rke2-selinux/releases/download/v0.15.testing.1/rke2-selinux-0.15-1.slemicro.noarch.rpm\nrpmkeys --import /root/public.key\n\n# Install RKE2 with SELinux\nzypper install -y /root/rke2-selinux.rpm\nEND\n\nchmod +x install-selinux.sh && transactional-update run /root/install-selinux.sh\n")),(0,a.kt)("p",null,"Now, the VM should be rebooted for the transactional-update to finish properly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"reboot\n")),(0,a.kt)("p",null,"After restarting the VM, we can verify that the policy was successfully installed as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"rpm -qa | grep rke2\n")),(0,a.kt)("h4",{id:"install-rke2"},"Install RKE2"),(0,a.kt)("p",null,"As a second step, an RKE2 cluster will be installed, which will use the policy installed in the previous section."),(0,a.kt)("p",null,"As the ",(0,a.kt)("inlineCode",{parentName:"p"},"rke2-policy")," was installed manually on the VM, some of its paths may not be created correctly, so the following commands will ensure that all the paths are fine."),(0,a.kt)("p",null,"Let's connect to the VM and run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p /var/lib/cni\nmkdir -p /opt/cni\nmkdir -p /var/lib/kubelet/pods\nmkdir -p /var/lib/rancher/rke2/agent/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots\nmkdir -p /var/lib/rancher/rke2/data\nmkdir -p /var/run/flannel\nmkdir -p /var/run/k3s\nrestorecon -R -i /etc/systemd/system/rke2.service\nrestorecon -R -i /usr/lib/systemd/system/rke2.service\nrestorecon -R /var/lib/cni\nrestorecon -R /opt/cni\nrestorecon -R /var/lib/kubelet\nrestorecon -R /var/lib/rancher\nrestorecon -R /var/run/k3s\nrestorecon -R /var/run/flannel\n")),(0,a.kt)("p",null,"It's time for the RKE2 cluster to be installed but before that, RKE2 must be running Selinux mode:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'mkdir -p /etc/rancher/rke2 && echo "selinux: true" >> /etc/rancher/rke2/config.yaml\n')),(0,a.kt)("p",null,"Install RKE2 Using Install Script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl -sfL https://get.rke2.io | INSTALL_RKE2_EXEC="server" RKE2_SELINUX=true INSTALL_RKE2_VERSION=v1.27.3+rke2r1 sh -\n\n# Enable and Start RKE2\nsystemctl enable --now rke2-server.service\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"NOTE:")," RKE2 version ",(0,a.kt)("inlineCode",{parentName:"p"},"1.27")," is the first that supports ",(0,a.kt)("inlineCode",{parentName:"p"},"arm64")," architecture and it is still an experimental feature.")),(0,a.kt)("h3",{id:"get-the-kubeconfig"},"Get the Kubeconfig"),(0,a.kt)("p",null,"To use the Kubeconfig outside of the node, the following commands can be used:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Replace <node-ip> with the actual ip\nexport NODE_IP=<node-ip>\n\nsudo scp ${NODE_IP}:/etc/rancher/rke2/rke2.yaml ~/.kube/config && sed -i '' \"s/127.0.0.1/${NODE_IP}/g\" ~/.kube/config && chmod 600 ~/.kube/config\n")),(0,a.kt)("h3",{id:"verify-the-setup"},"Verify the setup"),(0,a.kt)("p",null,"Check SELinux status:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"sestatus\n")),(0,a.kt)("p",null,"The output should be similar to this one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     requested (insecure)\nMax kernel policy version:      33\n")),(0,a.kt)("p",null,"Check that all pods are in Running state:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get pod -A\n")),(0,a.kt)("p",null,"The output should be similar to this one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"NAMESPACE     NAME                                                    READY   STATUS      RESTARTS       AGE\nkube-system   cloud-controller-manager-slemicro                       1/1     Running     0 (2m3s ago)   3d5h\nkube-system   etcd-slemicro                                           1/1     Running     0 (2m9s ago)   3d5h\nkube-system   kube-apiserver-slemicro                                 1/1     Running     0 (2m9s ago)   3d5h\nkube-system   kube-controller-manager-slemicro                        1/1     Running     0 (2m7s ago)   3d5h\n(2m9s ago)   3d5h\n...\n")))}d.isMDXComponent=!0}}]);